/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clear;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author KRISHNA
 */
public class editor extends javax.swing.JFrame {

    /**
     * Creates new form editor
     */
    public editor() {
        initComponents();
    }
    EditorFunctions edit=new EditorFunctions();
    ArrayList<String> list;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        editor = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        insert = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        command = new javax.swing.JTextField();
        error = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        editor.setColumns(20);
        editor.setRows(5);
        editor.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                editorInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(editor);
        editor.setEditable(false);

        insert.setColumns(20);
        insert.setRows(5);
        jScrollPane2.setViewportView(insert);

        jLabel1.setText("command >");

        command.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandActionPerformed(evt);
            }
        });
        command.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                commandKeyReleased(evt);
            }
        });

        jLabel2.setText("MEMORY");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Commands:\nd - Display the entire content from memory.\nd.n.m - Display selected content\n \tn - From line number\n\tm - To line number\ni.n.text - Insert content at a particular position\n\t   n    - Position(line number) to insert content\n\t   text - Content\ndd.n - Delete a line\n       n - Position(line number) to delete\ndd.n.m - Delete selected content\n \t n - From line number\n\t m - To line number\nyy.n.m - Copy Selected content\n\t n - From line number\n       \t m - To line number\np.n - Paste the copied content\n      n - Position(line number) to paste\nz - Undo\nzz- Redo");
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(command, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(command, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void commandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_commandActionPerformed

    
    private void commandKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
             String s=command.getText().toString();
             commandCheck(s);
        }
                // TODO add your handling code here:
    }//GEN-LAST:event_commandKeyReleased

    private void editorInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_editorInputMethodTextChanged
        // TODO add yo+ur handling code here:
     
    
    }//GEN-LAST:event_editorInputMethodTextChanged
    
    public void commandCheck(String s)
    {
        
             String[] lines =s.split("\\.");
             if(lines[0].equals("d"))
             {
                if(s.equalsIgnoreCase("d"))
                {
                    if(s.length()>0)
                    {
                    String in = insert.getText().toString();
                    list=edit.display(in);
                    Display(list);
                    error.setText("Text Displayed");
                    }
                    else
                    {
                        error.setText("Empty file");
                    }
                } 
                else
                {
                    if(list.size()>0)
                    if(lines.length==3)
                    {

                        if (lines[1].matches("[0-9]+")&& lines[1].matches("[0-9]+")) 
                        {     
                             error.setText("");
                             int start=Integer.parseInt(""+lines[1]);
                             int end=Integer.parseInt(""+lines[2]);  
                             if(end>=list.size() && start<=end)
                             {
                               end=list.size();  
                             }
                             if(start>0 && start<=end)
                             {    
                                list=edit.display(start,end);
                                Display(list);
                             }
                             else
                             {
                                error.setText("Out of index");
                             }
                        } 
                        else
                        {
                            error.setText("invalid command");
                        }
                    }
                    else
                    {
                        error.setText("invalid command");
                    }
                }
            }
            else if(lines[0].equals("i"))
            {
                if(lines.length==3 && lines[1].matches("[0-9]+"))
                {
                   error.setText("");
                   int n=Integer.parseInt(""+lines[1]);
                   if(n>0 && n<=list.size()+1)
                   {
                        list=edit.insert(Integer.parseInt(lines[1]),lines[2]);
                        Display(list);
                   }
                   else
                   {
                       error.setText("out of index");
                   }
                }
                else
                {
                        error.setText("invalid command");
                }
            }
            else if(lines[0].equals("dd"))
            {
               
                if(lines.length==3)
                {
                    if (lines[1].matches("[0-9]+")&& lines[2].matches("[0-9]+")) {  
                        error.setText("");
                        int start=Integer.parseInt(""+lines[1]);
                        int end=Integer.parseInt(""+lines[2]);  
                        if(end<=list.size() && start>0 && start<=end)
                        {    
                            list=edit.delete(start,end);
                            Display(list);
                        }
                        else
                        {
                            error.setText("Out of index");
                        }
                    }   
                    else
                    {
                            error.setText("invalid command");
                    }
                }
                else if(lines.length==2)
                {
                    if(lines[1].matches("[0-9]+"))
                    {
                        error.setText("");
                        int n=Integer.parseInt(""+lines[1]);
                        if(n>0 && n<=list.size())
                        {
                            list=edit.delete(n);
                            Display(list);
                        }
                        else
                        {
                            error.setText("out of index");
                        }
                    }
                }
            }
            else if(lines[0].equals("yy") && lines[1].matches("[0-9]+") && lines[2].matches("[0-9]+"))
            {
                if(list.size()>0)
                {
                    error.setText("");
                    int start=Integer.parseInt(""+lines[1]);
                    int end=Integer.parseInt(""+lines[2]); 
                    if(end<=list.size() && start>0 && start<=end)
                    {    
                        edit.copyText(start,end);
                        error.setText("Text copied");;
                    }
                    else
                    {
                        error.setText("Out of index");
                    }
                }
            }
            else if(lines[0].equals("p") && lines[1].matches("[0-9]+"))
            {

                    error.setText("");
                     int n=Integer.parseInt(""+lines[1]);
                    if(n>0)
                    {
                        list=edit.paste(n-1);
                        Display(list);
                    }
                    else
                    {
                       error.setText("out of index");
                    }

            }
            else if(lines[0].equals("z"))
            {
               
               String undoCommand=edit.undo();
               commandCheck(undoCommand);
            }
            else
            {
                error.setText("invalid command");
            }
    }
    public void Display(ArrayList<String> list)
    {
        editor.setText("");
        for(int i=0;i<list.size();i++)
        {
            editor.append(i+1+"."+list.get(i).toString()+"\n");
        }
    }
    /**
     * @param args the command line arguments
     */
    public ArrayList<String>  a;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editor().setVisible(true);
            }
            
        });
  
        
        
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField command;
    private javax.swing.JTextArea editor;
    private javax.swing.JLabel error;
    private javax.swing.JTextArea insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
